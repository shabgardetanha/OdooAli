version: '3.9'

services:
  db:
    image: postgres:15
    container_name: odooali_db
    env_file:
      - .env
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-odooali}"]
      interval: 30s
      timeout: 10s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: odooali_redis
    restart: unless-stopped

  backend:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: odooali_backend
    env_file:
      - .env
    volumes:
      - ./backend:/app
      - backend_logs:/app/logs
      - static_volume:/app/static
      - media_volume:/app/media
    ports:
      - "8000:8000"
    depends_on:
      - db
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      

  celery:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: odooali_celery
    env_file: .env
    command: celery -A backend worker -l info
    depends_on:
      - backend
      - redis
    restart: unless-stopped

  celery_beat:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: odooali_celery_beat
    env_file: .env
    command: celery -A backend beat -l info
    depends_on:
      - backend
      - redis
    restart: unless-stopped
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: odooali_frontend
    env_file:
      - .env
    environment:
    - REACT_APP_API_BASE_URL=http://django_web:8000/api
    restart: unless-stopped
    depends_on:
      - backend
    volumes:
      - frontend_logs:/var/log/nginx
      - ./frontend/nginx/ssl:/etc/nginx/ssl


  nginx:
    image: nginx:alpine
    container_name: odooali_nginx
    ports:
      - "${NGINX_PORT}:80"
      - "443:443"
    volumes:
      - ./frontend/dist:/usr/share/nginx/html:ro   
      - ./frontend/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./frontend/nginx/ssl:/etc/nginx/ssl:ro
      - frontend_logs:/var/log/nginx
      - static_volume:/app/static
      - media_volume:/app/media
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/prometheus/rules:/etc/prometheus/rules
    ports:
      - "9090:9090"
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    volumes:
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/alerts:/etc/grafana/alerts
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_ALERTING_ENABLED=true
      - GF_USERS_ALLOW_SIGN_UP=false
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL}
    ports:
      - "3000:3000"
    restart: unless-stopped
    depends_on:
      - prometheus


  nginx-exporter:
    image: nginx/nginx-prometheus-exporter:latest
    container_name: nginx_exporter
    ports:
      - "9113:9113"
    volumes:
      - ./frontend/nginx/logs:/var/log/nginx:ro
    command:
      -nginx.scrape-uri=http://odooali_nginx:80/stub_status
    restart: unless-stopped
    depends_on:
      - nginx


  alertmanager:
    image: prom/alertmanager
    container_name: alertmanager
    volumes:
      - ./monitoring/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
    ports:
      - "9093:9093"
    restart: unless-stopped

  postgres_exporter:
    image: prometheuscommunity/postgres-exporter
    container_name: postgres_exporter
    env_file:
    - .env
    environment:
      DATA_SOURCE_NAME: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}?sslmode=disable"
    ports:
      - "9187:9187"
    restart: unless-stopped
    depends_on:
      - db
    
  node_exporter:
    image: prom/node-exporter
    container_name: node_exporter
    ports:
      - "9100:9100"
    restart: unless-stopped

  cadvisor:
    image: google/cadvisor:v0.32.0
    container_name: cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    ports:
      - "8081:8081"
    restart: unless-stopped

  loki:
    image: grafana/loki:2.8.2
    container_name: loki
    ports:
      - "3100:3100"
    volumes:
      - loki_data:/loki
    restart: unless-stopped

  promtail:
    image: grafana/promtail:2.8.2
    container_name: promtail
    volumes:
      - /var/log:/var/log
      - ./monitoring/promtail-config.yml:/etc/promtail/config.yml
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    restart: unless-stopped


volumes:
  postgres_data:
  backend_logs:
  frontend_logs:
  grafana_data:
  loki_data:
  static_volume:
  media_volume: